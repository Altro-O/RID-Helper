console.log('Background script loaded');

chrome.runtime.onInstalled.addListener(() => {
  console.log('Extension installed');
  chrome.storage.local.set({ rids: [] });
  // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
  checkForUpdates();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
chrome.alarms.create('checkUpdate', { periodInMinutes: 1 });

chrome.alarms.onAlarm.addListener((alarm) => {
  console.log('Alarm triggered:', alarm.name);
  if (alarm.name === 'checkUpdate') {
    checkForUpdates();
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
chrome.runtime.onStartup.addListener(() => {
  console.log('Extension started');
  checkForUpdates();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function checkForUpdates() {
    console.log('Checking for updates...');
    try {
        const response = await fetch('https://raw.githubusercontent.com/Altro-O/RID-Helper/main/version.json');
        const data = await response.json();
        const currentVersion = chrome.runtime.getManifest().version;
        console.log('Current version:', currentVersion);
        console.log('Latest version:', data.version);
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ x.y.z
        const currentParts = currentVersion.split('.').map(Number);
        const latestParts = data.version.split('.').map(Number);
        
        let hasUpdate = false;
        for (let i = 0; i < 3; i++) {
            if (latestParts[i] > currentParts[i]) {
                hasUpdate = true;
                break;
            } else if (latestParts[i] < currentParts[i]) {
                break;
            }
        }
        
        if (hasUpdate) {
            console.log('Update available!');
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π –±–µ–π–¥–∂ —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
            chrome.action.setBadgeText({ text: '!' });
            chrome.action.setBadgeBackgroundColor({ color: '#EA4335' });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            chrome.storage.local.set({ 
                updateInfo: {
                    version: data.version,
                    downloadUrl: data.download_url,
                    changes: data.changes,
                    showNotification: true
                }
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            chrome.notifications.create('update-notification', {
                type: 'basic',
                iconUrl: 'icons/icon48.png',
                title: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                message: `–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${data.version}. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å.`,
                priority: 2
            });
        } else {
            console.log('No updates available');
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, —É–±–∏—Ä–∞–µ–º –±–µ–π–¥–∂
            chrome.action.setBadgeText({ text: '' });
            chrome.storage.local.set({ 
                updateInfo: {
                    showNotification: false
                }
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
checkForUpdates();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
chrome.alarms.create('updateCheck', { periodInMinutes: 60 });
chrome.alarms.onAlarm.addListener((alarm) => {
    if (alarm.name === 'updateCheck') {
        checkForUpdates();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
chrome.notifications.onClicked.addListener((notificationId) => {
    console.log('Notification clicked:', notificationId);
    if (notificationId === 'update-notification') {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        chrome.storage.local.get('updateInfo', ({ updateInfo }) => {
            if (updateInfo && updateInfo.downloadUrl) {
                chrome.tabs.create({ url: updateInfo.downloadUrl });
            }
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    switch (request.action) {
        case 'checkUpdate':
            checkForUpdates().then(sendResponse);
            return true;
        case 'getSettings':
            getSettings().then(sendResponse);
            return true;
        case 'sendTelegramFeedback':
            sendTelegramFeedback(request.feedback).then(sendResponse);
            return true;
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –≤ Telegram
async function sendTelegramFeedback(feedback) {
    const BOT_TOKEN = '8166900887:AAGDiYGDLIHaonG85mdeg-RcyJY_ebSgzDI';
    const CHAT_ID = '-1002390424799';
    
    const message = `
üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤*

*–¢–∏–ø:* ${feedback.type}
*–í–µ—Ä—Å–∏—è:* ${feedback.version}
*–î–∞—Ç–∞:* ${new Date(feedback.timestamp).toLocaleString('ru-RU')}

*–°–æ–æ–±—â–µ–Ω–∏–µ:*
${feedback.text}

*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
\`${feedback.userAgent}\`
    `.trim();

    try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        if (!response.ok) {
            throw new Error(`Telegram API error: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('Feedback sent to Telegram:', result);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        chrome.notifications.create({
            type: 'basic',
            iconUrl: 'icons/icon48.png',
            title: '–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.'
        });

        return result;
    } catch (error) {
        console.error('Error sending feedback to Telegram:', error);
        throw error;
    }
} 